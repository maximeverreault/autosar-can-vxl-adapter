name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}/boost_*.tar.gz
          key: boost-1.81.0
      - name: Install Boost
        id: boost
        uses: egor-tensin/build-boost@v1.4
        with:
          version: 1.81.0
          libraries: program_options
          platform: x64
          configuration: Release
          toolset: mingw
          static: 1
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Cache fmt library
        id: cache-fmt-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/fmt-9.1.0
          key: ${{ runner.os }}-fmt
      - name: Fetch fmt library
        if: steps.cache-fmt-restore.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://github.com/fmtlib/fmt/releases/download/9.1.0/fmt-9.1.0.zip" -OutFile "${{ github.workspace }}/fmt-9.1.0.zip"
          Expand-Archive -Path ${{ github.workspace }}/fmt-9.1.0.zip -DestinationPath ${{ github.workspace }}
          cd ${{ github.workspace }}/fmt-9.1.0
          mkdir build
      - name: Install fmt library
        run: |
          cd ${{ github.workspace }}/fmt-9.1.0/build
          cmake .. -G Ninja
          ninja install
      - name: Save fmt library
        if: steps.cache-fmt-restore.outputs.cache-hit != 'true'
        id: cache-fmt-save
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/fmt-9.1.0
          key: ${{ steps.cache-fmt-restore.outputs.cache-primary-key }}
      - name: Cache Vector Drivers
        id: cache-vector-drivers
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vector-drivers.zip
          key: vector-drivers-cache
      - name: Download Vector Drivers
        if: steps.cache-vector-drivers.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://www.vector.com/int/en/download/download-action/?tx_vecdownload_download%5Baction%5D=download&tx_vecdownload_download%5Bcontroller%5D=Download&tx_vecdownload_download%5Bdownload%5D=46642&cHash=bb3bfd847dc59ca157c80384a1d82274" -OutFile "${{ github.workspace }}/vector-drivers.zip"
      - name: Install Vector Drivers
        run: |
          Expand-Archive -Path ${{ github.workspace }}/vector-drivers.zip -DestinationPath ${{ github.workspace }}/vector-drivers
          cd vector-drivers/Drivers
          .\setup.exe /installCert /s /i virtual
          cd x64
          .\vcanconf.exe -impApplCfg -filePathAndName:"${{ github.workspace }}/tools/vector_hardware_settings.vaset"
          "${{ github.workspace }}/vxlapi" >> $env:GITHUB_PATH
      - name: Run build-wrapper
        run: |
          New-Item -ItemType directory -Path build
          cmake -S . -B build -G Ninja -DSTANDALONE=1 -D "BOOST_ROOT=${{ steps.boost.outputs.root }}" -D "BOOST_LIBRARYDIR=${{ steps.boost.outputs.librarydir }}"
          build-wrapper-win-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Coverage --target ${{ github.event.repository.name }}_Tests
      - name: Run tests
        run: |
          cd ${{ github.workspace }}/build
          ctest --output-on-failure
      - name: Process coverage data
        run: |
          cd ${{ github.workspace }}
          mkdir coverage-dir
          cd coverage-dir
          @(Get-ChildItem -Path ..\ -Filter *.obj -Recurse -File) | %{&"gcov" --preserve-paths $_.FullName}
      - name: Cache sonar-scanner CFamily analysis
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}/.cache
          key: sonar-cache
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" --define sonar.cfamily.cache.enabled=true --define sonar.cfamily.cache.path=${{ runner.workspace }}/.cache --define sonar.cfamily.gcov.reportsPath="${{ github.workspace }}/coverage-dir"

